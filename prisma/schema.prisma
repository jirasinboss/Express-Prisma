// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @db.VarChar(30) @unique
  password    String        @db.VarChar(72)
  email       String?
  firstname  String        
  lastname   String              
  phone       Int    
  Cart        Cart[]
  Order       Order[]

  @@map("users")
}

model Order {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int      @map("user_id")
  order_date      DateTime
  total_price     String
  status          String
  orderDetails    OrderDetail[]  // Define the opposite relation field here
  shipping        Shipping?     // Add the opposite relation field

  @@map("order")
}


model Cart {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int          @map("user_id")

  quantity       Int

  @@map("cart")
}

model Product {
  id               Int        @id @default(autoincrement())
  name             String
  description      String
  price            Int    // Remove onDelete and onUpdate from here
  cartId           Int        @map("cart_id")
  OrderDetail     OrderDetail[]  // Define the opposite relation field here

  @@map("product")
}

model Shipping {
    id            Int     @id @default(autoincrement())
    phone         String
    email         String?
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId       Int     @map("order_id") @unique
    
    @@map("shipping")
}


model OrderDetail {
    id            Int             @id @default(autoincrement())
    quantity      Int
    subtotal      Int
    order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId       Int             @map("order_id")
    product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productId     Int             @map("product_id")

    @@map("orderdetail")
}

